// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package ports

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all tasks
	// (GET /tasks)
	GetAllTasks(c *fiber.Ctx) error
	// Create a task
	// (POST /tasks)
	CreateTask(c *fiber.Ctx) error
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTask(c *fiber.Ctx, id openapi_types.UUID) error
	// Get a task by ID
	// (GET /tasks/{id})
	GetOneTask(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a task
	// (PUT /tasks/{id})
	UpdateTask(c *fiber.Ctx, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(c *fiber.Ctx) error {

	return siw.Handler.GetAllTasks(c)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *fiber.Ctx) error {

	return siw.Handler.CreateTask(c)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteTask(c, id)
}

// GetOneTask operation middleware
func (siw *ServerInterfaceWrapper) GetOneTask(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetOneTask(c, id)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.UpdateTask(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/tasks", wrapper.GetAllTasks)

	router.Post(options.BaseURL+"/tasks", wrapper.CreateTask)

	router.Delete(options.BaseURL+"/tasks/:id", wrapper.DeleteTask)

	router.Get(options.BaseURL+"/tasks/:id", wrapper.GetOneTask)

	router.Put(options.BaseURL+"/tasks/:id", wrapper.UpdateTask)

}
